# ------------------------------------------------------------------------------
# More resources related to this file:
# [1] Overview   | https://docs.docker.com/compose/
# [2] PostgreSQL | https://github.com/docker-library/docs/tree/master/postgres
# [3] Node.js    | https://github.com/nodejs/docker-node/blob/master/README.md#how-to-use-this-image
# -------------
#  More resources for your projects:
# [4] Samples    | https://github.com/docker/awesome-compose
# [5] Env Vars   | https://docs.docker.com/compose/environment-variables/
# [6] Secrets    | https://docs.docker.com/engine/swarm/secrets/#use-secrets-in-compose
# ------------------------------------------------------------------------------
version: "3.9"
# This section defines all of our components as "services", each which is
# itself a docker image [1].
services:
  # This section defines our Node.js image [3].
  web:
    image: "node:${NODE_VERSION:-14}"
    user: "node"                            # Use a non-root user node
    working_dir: /home/node/app             # with home directory /home/node/app
    # environment:
    #   - NODE_ENV=production               # << Use this when deploying your 
    #                                       # application, currently we have it 
    #                                       # off so that changes to *.es are
    #                                       # visible without restarting 
    #                                       # docker-compose.
    depends_on:
      - db                                  # This indicates that docker should 
                                            # start the database first,
                                            # otherwise our website would have 
                                            # no data.
    ports:
        - "3000:3000"                       # Here we do need to publish the 
                                            # port for viewing on the host.
    volumes:
      - ./:/home/node/app                   # Binds the current directory 
                                            # (containing our source code) into 
                                            # the image, so that changes made 
                                            # to the source code on the host 
                                            # are reflected witin the container.
    command: "npm start"                    # This just runs node index.js, see 
                                            # the command in package.json.

  # This section defines our PostgreSQL database [2].
  # Note that the name `db` also becomes the hostname of the postgres container 
  # when referenced from other services, more on that in a few weeks. 
  db:
    image: "postgres:${POSTGRES_VERSION:-12}"
    # Environment variables to setup postgres ar stored in a .env file. For 
    # this lab it is checked into your repo, please note that this is not 
    # secure, and in production (or your project), you should not commit this 
    # file to GitHub.
    env_file: .env
    expose:
      - "5432"                              # We need only expose port `5432` 
                                            # internally to node (not the host)
    volumes:
      - lab-01-db:/var/lib/postgresql/data  # Binds the docker managed volume 
                                            # to persist your data.

# This defines our volume(s), which will persist throughout startups.
# If you want to get rid of a hanging volume, e.g. to test your database init,
# run `docker-compose rm -v`. Note that this will remove ALL of your data, so
# be extra sure you've made a stable backup somewhere.
volumes:
  lab-01-db: {}
